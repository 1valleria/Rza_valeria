@page "/register"
@using Rza_valeria.Models
@using Rza_valeria.Services
@inject CustomerService CustomerService
@rendermode InteractiveServer

@using Rza_valeria.Utilities
@inject NavigationManager NavigationManager
@inject UserSession UserSession


<body>
    <section class="sub-header">
        <nav>
            <a href="/"><img class="newlogo" src="images/logo.png"></a>
            <div class="nav-links" id="navLinks">
                <i class="fa fa-close" onclick="hideMenu()"></i>
                <ul>
                    <li><a href="/">HOME</a></li>
                    <li><a href="/login">SIGN-IN</a></li>
                    <li><a href="/register">SIGN-UP</a></li>
                    <li><a href="/bookings">BOOK</a></li>
                    <li><a href="/tickets">TICKETS</a></li>
                    <li><a href="/exploreZoo">EDUCATIONAL VISITS</a></li>
                    <li><a href="/location">LOCATION</a></li>
                    <li><a href="/reviews">REVIEWS</a></li>
                </ul>
            </div>
                <i class="fa fa-bars" onclick="showMenu()"></i>
        </nav>

    </section>


    <main>
        <div class="content">
            <div class="form-container">
                <h1>Register</h1>
                <EditForm Model="newCustomer" OnValidSubmit="HandleValidSubmit" FormName="testForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @* <form action="#" method="POST"> *@
                    <div>
                        <label>Username:</label>
                        <InputText @bind-Value="newCustomer.Username" />
                    </div>
                    <div>
                        <label>First Name:</label>
                        <InputText @bind-Value="newCustomer.FirstName" />
                    </div>
                    <div>
                        <label>Last Name:</label>
                        <InputText @bind-Value="newCustomer.LastName" />
                    </div>
                    <div>
                        <label>Email Address:</label>
                        <InputText @bind-Value="newCustomer.Email" />
                    </div>
                    <div>
                        <label>Password:</label>
                        <InputText @bind-Value="password" type="password" />
                    </div>
                    @* <label for="name">Name</label>
                    <input type="text" name="name" required>

                    <label for="email">Email</label>
                    <input type="email" id="email" name="email" required>

                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" required>

                    <label for="dob">Date of Birth</label>
                    <select id="dob" name="dob">
                        <option value="">Select</option>
                        <!-- Add DOB options here -->
                    </select> *@
                    <button type="submit" class="btn">Sign Up</button>
                </EditForm>
                @* </form> *@
            </div>
        </div>
    </main>
</body>

@*<EditForm Model="newCustomer" OnValidSubmit="HandleValidSubmit" FormName="testForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

     <div>
        <label>Username:</label>
        <InputText @bind-Value="newCustomer.Username" />
    </div>

    <div>
        <label>Password:</label>
        <InputText @bind-Value="password" type="password" />
    </div>

    <div>
        <label>First Name:</label>
        <InputText @bind-Value="newCustomer.FirstName" />
    </div>

    <div>
        <label>Last Name:</label>
        <InputText @bind-Value="newCustomer.LastName" />
    </div>

    <div>
        <label>Email Address:</label>
        <InputText @bind-Value="newCustomer.Email" />
    </div>
    <div>
        <label style="color:red">@message</label>
    </div>
    <button type="submit">Register</button>
</EditForm> *@

@code {
    private Customer newCustomer = new Customer();
    private string password;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        if (UserSession.UserId != 0)
        {
            NavigationManager.NavigateTo("/account");
        }
    }

    private async Task HandleValidSubmit()
    {
        bool usernameTaken = await CustomerService.CheckUsernameExistsAsync(newCustomer.Username);
        bool passwordValid = await PasswordUtils.ValidPassword(password);
        if (usernameTaken)
        {
            Console.WriteLine("username taken");
            message = "username taken";
        }
        else if (!passwordValid)
        {
            message = "password does not meet criteria";
        }
        else
        {
            // Hash the password using SHA256
            newCustomer.Password = PasswordUtils.HashPassword(password);

            // Insert the user into the database
            await CustomerService.AddCustomerAsync(newCustomer);
            newCustomer = new Customer();
            password = "";
            NavigationManager.NavigateTo("");
        }
    }
} 
